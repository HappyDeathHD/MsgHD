const WebSocket = require('ws');
const http = require('http');
const path = require('path');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const server = http.createServer((req, res) => {
    let filePath = '.' + req.url;
    if (filePath === './') {
        filePath = './index.html';
    }

    const extname = String(path.extname(filePath)).toLowerCase();
    const mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.wav': 'audio/wav',
        '.mp4': 'video/mp4',
        '.woff': 'application/font-woff',
        '.ttf': 'application/font-ttf',
        '.eot': 'application/vnd.ms-fontobject',
        '.otf': 'application/font-otf',
        '.wasm': 'application/wasm'
    };

    const contentType = mimeTypes[extname] || 'application/octet-stream';

    fs.readFile(filePath, (error, content) => {
        if (error) {
            if (error.code === 'ENOENT') {
                res.writeHead(404, { 'Content-Type': 'text/html' });
                res.end('<h1>404 Not Found</h1>', 'utf-8');
            } else {
                res.writeHead(500);
                res.end(`Server Error: ${error.code}`, 'utf-8');
            }
        } else {
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content, 'utf-8');
        }
    });
});

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ server });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map();
const rooms = new Map();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
function broadcast(message, excludeWs = null) {
    const messageStr = JSON.stringify(message);
    wss.clients.forEach(client => {
        if (client !== excludeWs && client.readyState === WebSocket.OPEN) {
            client.send(messageStr);
        }
    });
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function sendUsersList() {
    const usersList = Array.from(users.values()).map(user => ({
        id: user.id,
        username: user.username,
        status: user.status,
        lastSeen: user.lastSeen
    }));
    
    broadcast({
        type: 'users_list',
        users: usersList
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (ws) => {
    console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    
    ws.on('message', (data) => {
        try {
            const message = JSON.parse(data);
            
            switch (message.type) {
                case 'join':
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
                    const user = {
                        id: message.userId,
                        username: message.username,
                        status: 'online',
                        lastSeen: Date.now(),
                        ws: ws
                    };
                    
                    users.set(ws, user);
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} (${user.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    ws.send(JSON.stringify({
                        type: 'joined',
                        userId: user.id,
                        username: user.username
                    }));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö
                    sendUsersList();
                    break;
                    
                case 'message':
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const sender = users.get(ws);
                    if (sender) {
                        const messageData = {
                            type: 'message',
                            id: Date.now() + Math.random(),
                            senderId: sender.id,
                            senderName: sender.username,
                            recipientId: message.recipientId,
                            text: message.text,
                            timestamp: Date.now()
                        };
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                        const recipientWs = Array.from(users.entries())
                            .find(([ws, user]) => user.id === message.recipientId)?.[0];
                        
                        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                            recipientWs.send(JSON.stringify(messageData));
                        }
                        
                        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                        ws.send(JSON.stringify(messageData));
                        
                        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender.username} –∫ ${message.recipientId}: ${message.text}`);
                    }
                    break;
                    
                case 'typing':
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
                    const typingSender = users.get(ws);
                    if (typingSender) {
                        const recipientWs = Array.from(users.entries())
                            .find(([ws, user]) => user.id === message.recipientId)?.[0];
                        
                        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                            recipientWs.send(JSON.stringify({
                                type: 'typing',
                                senderId: typingSender.id,
                                isTyping: message.isTyping
                            }));
                        }
                    }
                    break;
                    
                case 'search':
                    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const searchQuery = message.query.toLowerCase();
                    const results = Array.from(users.values())
                        .filter(user => 
                            user.username.toLowerCase().includes(searchQuery) ||
                            user.id.includes(searchQuery)
                        )
                        .map(user => ({
                            id: user.id,
                            username: user.username,
                            status: user.status
                        }));
                    
                    ws.send(JSON.stringify({
                        type: 'search_results',
                        results: results
                    }));
                    break;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });
    
    ws.on('close', () => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
        const user = users.get(ws);
        if (user) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
            users.delete(ws);
            sendUsersList();
        }
    });
    
    ws.on('error', (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    });
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
setInterval(() => {
    wss.clients.forEach(ws => {
        if (ws.readyState === WebSocket.CLOSED) {
            const user = users.get(ws);
            if (user) {
                users.delete(ws);
            }
        }
    });
}, 30000);

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ MsgHD —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    console.log(`üåê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à IP: http://[YOUR_IP]:${PORT}`);
});
